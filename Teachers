import SwiftUI

class Teachers: Codable, Identifiable, ObservableObject {
    let teachersURL = FileManager.documentsDirectory.appendingPathComponent("SavedTeachers")
    let assignmentsURL = FileManager.documentsDirectory.appendingPathComponent("SavedAssignments")
    var id = UUID()
    @Published var teachers = [Teacher]() {
        didSet {
            saveTeachers()
        }
    }
    @Published var assignments = [Assignment]() {
        didSet {
            saveAssignments()
        }
    }
    
    func saveTeachers() {
        do {
            let encodedData = try JSONEncoder().encode(teachers) 
            try encodedData.write(to: teachersURL, options: [.atomic, .completeFileProtection])
        } catch {
            print("An error has occured: \(error.localizedDescription)")
        }
    }
    
    func saveAssignments() {
        do {
            let encodedData = try JSONEncoder().encode(assignments) 
            try encodedData.write(to: assignmentsURL, options: [.atomic, .completeFileProtection])
        } catch {
            print("An error has occured: \(error.localizedDescription)")
        }
    }
    
    enum CodingKeys: CodingKey {
        case teachers, assignments
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(teachers, forKey: .teachers)
        try container.encode(assignments, forKey: .assignments)
    }
    
    required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        teachers = try container.decode([Teacher].self, forKey: .teachers)
        assignments = try container.decode([Assignment].self, forKey: .assignments)
    }
    
    init() { 
        do {
            let teacherData = try Data(contentsOf: teachersURL)
            teachers = try JSONDecoder().decode([Teacher].self, from: teacherData)
            
            let assignmentData = try Data(contentsOf: assignmentsURL)
            assignments = try JSONDecoder().decode([Assignment].self, from: assignmentData)
        } catch {
            print("An error has occured: \(error)")
        }
    }
}
